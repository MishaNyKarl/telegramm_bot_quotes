import asyncio

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import time
import schedule
from datetime import datetime
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ParseMode
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import random
import aiogram.utils.markdown as md
import random
import schedule
import time

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton
from settings import TOKEN



bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

quotes = []
with open('Quotes.txt') as f:
    for i in range(30):
        quotes.append(f.readline().replace('\n',''))
print('–ì–æ—Ç–æ–≤–æ')
print(quotes)



@dp.message_handler(commands=['start'])
async def process_start_command(msg: types.Message):
    kb = [[
        types.KeyboardButton(text='–ò–∑–º. –≤—Ä–µ–º—è —É–≤–µ–¥.'),
        types.KeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É —Å–µ–π—á–∞—Å')
    ]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è',
        one_time_keyboard = True,

    )
    if datetime.now().minute > 1:
        min = datetime.now().minute
    else:
        min = '0' + str(datetime.now().minute)
    await msg.answer(
        f"–ü—Ä–∏–≤–µ—Ç! üòä\n–¢–µ–ø–µ—Ä—å –≤ {datetime.now().hour}.{min} –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –¶–∏—Ç–∞—Ç—É –≤–µ–ª–∏–∫–∏—Ö –ª—é–¥–µ–π!",reply_markup=keyboard)


@dp.message_handler(Text('–ò–∑–º. –≤—Ä–µ–º—è —É–≤–µ–¥.'))
async def change_time(msg: types.Message):

    kb = [
        [
            types.KeyboardButton(text='7.00'),
            types.KeyboardButton(text='8.00'),
            types.KeyboardButton(text='9.00'),
            types.KeyboardButton(text='10.00'),
        ],
        [
            types.KeyboardButton(text='11.00'),
            types.KeyboardButton(text='12.00'),
            types.KeyboardButton(text='13.00'),
            types.KeyboardButton(text='14.00'),
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏',
        one_time_keyboard=True,
    )
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, —É–¥–æ–±–Ω–æ–µ –≤–∞–º',reply_markup=keyboard)

async def send_random_message():
    message = random.choice(quotes)
    await bot.send_message(chat_id='1900247997',text=message)

async def start_scheduler_for_seven():
    schedule.every().day.at("07:00").do(lambda: asyncio.create_task(send_random_message()))
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

@dp.message_handler(Text('7.00'))
async def time_seven(msg: types.Message):
    await msg.answer("–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00.")
    # –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    asyncio.create_task(start_scheduler_for_seven())







@dp.message_handler(Text('–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É —Å–µ–π—á–∞—Å'))
async def give_quo(msg: types.Message):

    kb = [[
        types.KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'),
        types.KeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É —Å–µ–π—á–∞—Å')
    ]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã',
        one_time_keyboard=True,

    )
    with open('Quotes.txt') as f:
        quo = []
        for i in range(78):
            quo.append(f.readline())
        rand_quo = quo[random.randint(30,78)]
    await msg.answer(rand_quo, reply_markup=keyboard)



@dp.message_handler(Text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))
async def main_menu(msg: types.Message):

    kb = [[
        types.KeyboardButton(text='–ò–∑–º. –≤—Ä–µ–º—è —É–≤–µ–¥.'),
        types.KeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É —Å–µ–π—á–∞—Å')
    ]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        one_time_keyboard=True,
    )

    await msg.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)

@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏")



if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(start_scheduler_for_seven())
    executor.start_polling(dp,skip_updates=True)